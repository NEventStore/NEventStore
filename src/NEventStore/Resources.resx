<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
      Microsoft ResX Schema 
      
      Version 2.0
      
      The primary goals of this format is to allow a simple XML format 
      that is mostly human readable. The generation and parsing of the 
      various data types are done through the TypeConverter classes 
      associated with the data types.
      
      Example:
      
      ... ado.net/XML headers & schema ...
      <resheader name="resmimetype">text/microsoft-resx</resheader>
      <resheader name="version">2.0</resheader>
      <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
      <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
      <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
      <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
      <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
          <value>[base64 mime encoded serialized .NET Framework object]</value>
      </data>
      <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
          <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
          <comment>This is a comment</comment>
      </data>
                  
      There are any number of "resheader" rows that contain simple 
      name/value pairs.
      
      Each data row contains a name, and value. The row also contains a 
      type or mimetype. Type corresponds to a .NET class that support 
      text/value conversion through the TypeConverter architecture. 
      Classes that don't support this are serialized and stored with the 
      mimetype set.
      
      The mimetype is used for serialized objects, and tells the 
      ResXResourceReader how to depersist the object. This is currently not 
      extensible. For a given mimetype the value must be set accordingly:
      
      Note - application/x-microsoft.net.object.binary.base64 is the format 
      that the ResXResourceWriter will generate, however the reader can 
      read any of the formats listed below.
      
      mimetype: application/x-microsoft.net.object.binary.base64
      value   : The object must be serialized with 
              : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
              : and then encoded with base64 encoding.
      
      mimetype: application/x-microsoft.net.object.soap.base64
      value   : The object must be serialized with 
              : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
              : and then encoded with base64 encoding.
  
      mimetype: application/x-microsoft.net.object.bytearray.base64
      value   : The object must be serialized into a byte array 
              : using a System.ComponentModel.TypeConverter
              : and then encoded with base64 encoding.
      -->
    <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"
                id="root"
                xmlns="">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string"/>
                            <xsd:attribute name="type" type="xsd:string"/>
                            <xsd:attribute name="mimetype" type="xsd:string"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string"/>
                            <xsd:attribute name="name" type="xsd:string"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required"/>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>
    <data name="ReadOnlyCollection" xml:space="preserve">
    <value>The collection is read only and cannot be modified.</value>
  </data>
    <data name="AlreadyDisposed" xml:space="preserve">
    <value>The object has already been disposed.</value>
  </data>
    <data name="NonPositiveSequenceNumber" xml:space="preserve">
    <value>The commit sequence must be a positive number.</value>
  </data>
    <data name="NonPositiveRevisionNumber" xml:space="preserve">
    <value>The stream revision must be a positive number.</value>
  </data>
    <data name="RevisionTooSmall" xml:space="preserve">
    <value>The stream revision must always be greater than or equal to the commit sequence.</value>
  </data>
    <data name="InitializingPersistence" xml:space="preserve">
    <value>Initializing persistence engine.</value>
  </data>
    <data name="DisposingEngine" xml:space="preserve">
    <value>Disposing engine.</value>
  </data>
    <data name="InitializingEngine" xml:space="preserve">
    <value>Initializing engine.</value>
  </data>
    <data name="GettingAllCommitsFromRevision" xml:space="preserve">
    <value>Getting all commits for stream '{0}' bucket '{1}' between '{2}' and '{3}'.</value>
  </data>
    <data name="GettingAllCommitsFromTime" xml:space="preserve">
    <value>Getting all commits from bucket '{0}' from '{1}' forward.</value>
  </data>
    <data name="GettingAllCommitsFromToTime" xml:space="preserve">
    <value>Getting all commits from bucket '{0}' from '{1}' to '{2}'.</value>
  </data>
    <data name="AttemptingToCommit" xml:space="preserve">
    <value>Attempting to append commit '{0}' to stream '{1}' bucket '{2}' at position '{3}'.</value>
  </data>
    <data name="UpdatingStreamHead" xml:space="preserve">
    <value>Updating stream head for stream '{0}' bucket '{1}'.</value>
  </data>
    <data name="GettingStreamsToSnapshot" xml:space="preserve">
    <value>Getting the set of all streams to be snapshot from bucket '{0}' which exceed {1} revisions without a snapshot.</value>
  </data>
    <data name="GettingSnapshotForStream" xml:space="preserve">
    <value>Getting the most recent snapshot from bucket '{0}' for stream '{1}' on/since revision '{2}'.</value>
  </data>
    <data name="AddingSnapshot" xml:space="preserve">
    <value>Adding a snapshot for bucket '{0}' stream '{1}' at revision '{2}'.</value>
  </data>
    <data name="PurgingStore" xml:space="preserve">
    <value>Purging all data from storage.</value>
  </data>
    <data name="TrackingStreams" xml:space="preserve">
    <value>Tracking up to {0} streams.</value>
  </data>
    <data name="OptimisticConcurrencyCheck" xml:space="preserve">
    <value>Verifying that no other commits have succeed on the stream '{0}'.</value>
  </data>
    <data name="NoConflicts" xml:space="preserve">
    <value>No other commits have been discovered that conflict for stream '{0}' bucket '{1}'.</value>
  </data>
    <data name="TrackingCommit" xml:space="preserve">
    <value>Tracking commit {0} on stream '{1}' bucket '{2}'.</value>
  </data>
    <data name="NoLongerTrackingStream" xml:space="preserve">
    <value>Purging all commits on stream '{0}' bucket '{1}' from tracking.</value>
  </data>
    <data name="CreatingStream" xml:space="preserve">
    <value>Creating stream '{0}' in bucket '{1}'.</value>
  </data>
    <data name="OpeningStreamAtRevision" xml:space="preserve">
    <value>Opening stream '{0}' from bucket '{1}' between revisions {2} and {3}.</value>
  </data>
    <data name="OpeningStreamWithSnapshot" xml:space="preserve">
    <value>Opening stream '{0}' from bucket '{1}' with snapshot at {2} up to revision {3}.</value>
  </data>
    <data name="PipelineHookSkippedCommit" xml:space="preserve">
    <value>Pipeline hook of type '{0}' skipped over commit '{1}'.</value>
  </data>
    <data name="PipelineHookFilteredCommit" xml:space="preserve">
    <value>One or more pipeline hooks filtered out the commit.</value>
  </data>
    <data name="InvokingPreCommitHooks" xml:space="preserve">
    <value>Pushing commit '{0}' to pre-commit hook of type '{1}'.</value>
  </data>
    <data name="CommitRejectedByPipelineHook" xml:space="preserve">
    <value>Pipeline hook of type '{0}' rejected attempt '{1}'.</value>
  </data>
    <data name="CommittingAttempt" xml:space="preserve">
    <value>Committing attempt '{0}' which contains {1} events to the underlying persistence engine.</value>
  </data>
    <data name="InvokingPostCommitPipelineHooks" xml:space="preserve">
    <value>Pushing commit '{0}' to post-commit hook of type '{1}'.</value>
  </data>
    <data name="AddingCommitsToStream" xml:space="preserve">
    <value>Adding commit '{0}' with {1} events to stream '{2}' bucket'{3}'.</value>
  </data>
    <data name="IgnoringBeyondRevision" xml:space="preserve">
    <value>Ignoring some events on commit '{0}' of stream '{1}' because they go beyond revision {2}.</value>
  </data>
    <data name="IgnoringBeforeRevision" xml:space="preserve">
    <value>Ignoring some events on commit '{0}' of stream '{1}' because they starting before revision {2}.</value>
  </data>
    <data name="AppendingUncommittedToStream" xml:space="preserve">
    <value>Appending uncommitted event '{0}' to stream '{1}' bucket '{2}'</value>
  </data>
    <data name="AttemptingToCommitChanges" xml:space="preserve">
    <value>Attempting to commit all changes on stream '{0}' bucket '{1}' to the underlying store.</value>
  </data>
    <data name="NoChangesToCommit" xml:space="preserve">
    <value>There are no outstanding changes to be committed stream '{0}' bucket '{1}'.</value>
  </data>
    <data name="UnderlyingStreamHasChanged" xml:space="preserve">
    <value>The underlying stream '{0}' bucket '{1}' has changed since the last known commit, refreshing the stream. Exception Message: {2}</value>
  </data>
    <data name="PersistingCommit" xml:space="preserve">
    <value>Pushing attempt '{0}' on stream '{1}' bucket '{2}' with '{3}' events to the underlying store.</value>
  </data>
    <data name="BuildingCommitAttempt" xml:space="preserve">
    <value>Building a commit attempt '{0}' on stream '{1}' bucket '{2}'.</value>
  </data>
    <data name="ClearingUncommittedChanges" xml:space="preserve">
    <value>Clearing all uncommitted changes on stream '{0}' bucket '{1}'.</value>
  </data>
    <data name="ShuttingDownStore" xml:space="preserve">
    <value>Shutting down event store.</value>
  </data>
    <data name="ConvertingEvent" xml:space="preserve">
    <value>Converting an Event from '{0}' to '{1}'.</value>
  </data>
    <data name="GettingAllCommitsFromCheckpoint" xml:space="preserve">
    <value>Getting all commits since checkpoint '{0}' (excluded).</value>
  </data>
    <data name="GettingAllCommitsFromBucketAndCheckpoint" xml:space="preserve">
    <value>Getting all commits from bucket '{0}' since checkpoint '{1}' (excluded).</value>
  </data>
    <data name="DeletingStream" xml:space="preserve">
    <value>Deleting stream '{0}' from bucket '{1}'.</value>
  </data>
    <data name="WireupHookIntoPipeline" xml:space="preserve">
    <value>Hook into pipeline with hooks: {0}</value>
  </data>
    <data name="WireupSetPersistenceEngine" xml:space="preserve">
    <value>Configured Persistence Engine: {0}</value>
  </data>
    <data name="WireupSetSerializer" xml:space="preserve">
    <value>Configured serializer: {0}</value>
  </data>
    <data name="CannotAddCommitsToPartiallyLoadedStream" xml:space="preserve">
    <value>The stream '{0}' bucket '{1}' was partially loaded up to revision {1}. Cannot append commits to a partially loaded stream, refreshing the stream.</value>
  </data>
    <data name="GettingCommitsFromBucketAndFromToCheckpoint" xml:space="preserve">
    <value>Getting all commits from bucket '{0}' from checkpoint '{1}' (excluded) up to '{2}' (included).</value>
  </data>
    <data name="GettingCommitsFromToCheckpoint" xml:space="preserve">
    <value>Getting all commits from checkpoint '{0}' (excluded) up to '{1}' (included).</value>
  </data>
</root>