<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
      Microsoft ResX Schema 
      
      Version 2.0
      
      The primary goals of this format is to allow a simple XML format 
      that is mostly human readable. The generation and parsing of the 
      various data types are done through the TypeConverter classes 
      associated with the data types.
      
      Example:
      
      ... ado.net/XML headers & schema ...
      <resheader name="resmimetype">text/microsoft-resx</resheader>
      <resheader name="version">2.0</resheader>
      <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
      <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
      <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
      <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
      <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
          <value>[base64 mime encoded serialized .NET Framework object]</value>
      </data>
      <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
          <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
          <comment>This is a comment</comment>
      </data>
                  
      There are any number of "resheader" rows that contain simple 
      name/value pairs.
      
      Each data row contains a name, and value. The row also contains a 
      type or mimetype. Type corresponds to a .NET class that support 
      text/value conversion through the TypeConverter architecture. 
      Classes that don't support this are serialized and stored with the 
      mimetype set.
      
      The mimetype is used for serialized objects, and tells the 
      ResXResourceReader how to depersist the object. This is currently not 
      extensible. For a given mimetype the value must be set accordingly:
      
      Note - application/x-microsoft.net.object.binary.base64 is the format 
      that the ResXResourceWriter will generate, however the reader can 
      read any of the formats listed below.
      
      mimetype: application/x-microsoft.net.object.binary.base64
      value   : The object must be serialized with 
              : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
              : and then encoded with base64 encoding.
      
      mimetype: application/x-microsoft.net.object.soap.base64
      value   : The object must be serialized with 
              : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
              : and then encoded with base64 encoding.
  
      mimetype: application/x-microsoft.net.object.bytearray.base64
      value   : The object must be serialized into a byte array 
              : using a System.ComponentModel.TypeConverter
              : and then encoded with base64 encoding.
      -->
    <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"
                id="root"
                xmlns="">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string"/>
                            <xsd:attribute name="type" type="xsd:string"/>
                            <xsd:attribute name="mimetype" type="xsd:string"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string"/>
                            <xsd:attribute name="name" type="xsd:string"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required"/>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>
    <data name="InstanceCannotBeNull" xml:space="preserve">
    <value>The instance provided cannot be null.</value>
  </data>
    <data name="TypeMustBeInterface" xml:space="preserve">
    <value>The type provided must be registered as an interface rather than as a concrete type, e.g. "container.Register&lt;ISomeService&gt;(instance);".</value>
  </data>
    <data name="AddingWireupRegistration" xml:space="preserve">
    <value>Adding wireup registration for an object instance of type '{0}'.</value>
  </data>
    <data name="AddingWireupCallback" xml:space="preserve">
    <value>Adding wireup registration callback.</value>
  </data>
    <data name="ConfiguringInstancePerCall" xml:space="preserve">
    <value>Registration configured to resolve a new instance per call.</value>
  </data>
    <data name="ResolvingInstance" xml:space="preserve">
    <value>Resolving instance.</value>
  </data>
    <data name="BuildingNewInstance" xml:space="preserve">
    <value>Building new instance.</value>
  </data>
    <data name="AttemptingToResolveInstance" xml:space="preserve">
    <value>Attempting to resolve existing instance.</value>
  </data>
    <data name="BuildingAndStoringNewInstance" xml:space="preserve">
    <value>Building (and storing) new instance for later calls.</value>
  </data>
    <data name="RegisteringWireupCallback" xml:space="preserve">
    <value>Registering wireup resolver for service of type '{0}'.</value>
  </data>
    <data name="RegisteringServiceInstance" xml:space="preserve">
    <value>Registering wireup instance for service of type '{0}'.</value>
  </data>
    <data name="ResolvingService" xml:space="preserve">
    <value>Attempting to resolve instance for service of type '{0}'.</value>
  </data>
    <data name="UnableToResolve" xml:space="preserve">
    <value>Unable to resolve requested instance of type '{0}'.</value>
  </data>
    <data name="RegisteringPersistenceEngine" xml:space="preserve">
    <value>Registering persistence engine of type '{0}'.</value>
  </data>
    <data name="ConfiguringEngineInitialization" xml:space="preserve">
    <value>Configuring persistence engine to initialize.</value>
  </data>
    <data name="ConfiguringEngineEnlistment" xml:space="preserve">
    <value>Configuring persistence engine to enlist in ambient transactions using TransactionScope.</value>
  </data>
    <data name="BuildingEngine" xml:space="preserve">
    <value>Building the persistence engine.</value>
  </data>
    <data name="InitializingEngine" xml:space="preserve">
    <value>Initializing the configured persistence engine.</value>
  </data>
    <data name="ConfiguringCompression" xml:space="preserve">
    <value>Configuring serializer to compress the serialized payload.</value>
  </data>
    <data name="WrappingSerializerGZip" xml:space="preserve">
    <value>Wrapping serializer of type '{0}' in GZipSerializer.</value>
  </data>
    <data name="ConfiguringEncryption" xml:space="preserve">
    <value>Configuring serializer to encrypt the serialized payload.</value>
  </data>
    <data name="WrappingSerializerEncryption" xml:space="preserve">
    <value>Wrapping serializer of type '{0}' in RijndaelSerializer.</value>
  </data>
    <data name="AutoDetectDialect" xml:space="preserve">
    <value>Configuring SQL engine to auto-detect dialect.</value>
  </data>
    <data name="PagingSpecified" xml:space="preserve">
    <value>Persistence engine configured to page every '{0}' records.</value>
  </data>
    <data name="DialectSpecified" xml:space="preserve">
    <value>Registering SQL dialect of type '{0}'.</value>
  </data>
    <data name="ConnectionFactorySpecified" xml:space="preserve">
    <value>Using SQL connection factory of type '{0}'.</value>
  </data>
    <data name="EventUpconverterRegistered" xml:space="preserve">
    <value>Configuring the store to upconvert events when fetched.</value>
  </data>
    <data name="EventUpconvertersLoadedFrom" xml:space="preserve">
    <value>Will scan for event upconverters from the following assemblies: '{0}'</value>
  </data>
    <data name="ConfiguringEnginePerformanceTracking" xml:space="preserve">
    <value>Configuring persistence engine to track performance</value>
  </data>
    <data name="FailedToCompareCheckpoint" xml:space="preserve">
    <value>Cannot only compare {0} with {1}.</value>
  </data>
    <data name="StreamIdHasherSpecified" xml:space="preserve">
    <value>Registering stream ID hasher of type '{0}'</value>
  </data>
    <data name="ConcurrencyExceptionCommitSequence" xml:space="preserve">
    <value>Head CommitSequence [{0}] greater or equal than Attempt BucketId [{1}] - CommitSequence [{2}] - StreamId {3} - StreamRevision {4} - Events Count {5}</value>
  </data>
    <data name="ConcurrencyExceptionStreamRevision" xml:space="preserve">
    <value>Head StreamRevision [{0}] greater or equal than Attempt BucketId [{1}] - StreamId {2} - StreamRevision {3} - Events Count {4}</value>
  </data>
    <data name="DuplicateCommitIdException" xml:space="preserve">
    <value>Stream: {0} Bucket: {1} Duplicate commit id {2}.</value>
  </data>
    <data name="StorageExceptionCommitSequence" xml:space="preserve">
    <value>Head CommitSequence [{0}] lesser than Attempt BucketId [{1}] - CommitSequence [{2}] - StreamId {3} - StreamRevision {4} - Events Count {5}</value>
  </data>
    <data name="StorageExceptionEndOfStream" xml:space="preserve">
    <value>Stream EOF: head.StreamRevision [{0}] &lt; attempt.StreamRevision [{1}] - attempt.Events.Count [{2}] - BucketId {3} - StreamId {4} - StreamRevision {5} </value>
  </data>
    <data name="StreamNotFoundException" xml:space="preserve">
    <value>Stream not found: StreamId {0} bucket {1}.</value>
  </data>
</root>